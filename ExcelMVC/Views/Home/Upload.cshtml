@model System.Data.DataTable
@using System.Data


<h1>Excel Viewer</h1>

<div class="table-container">
    @if (Model != null && Model.Rows.Count > 0)
    {
        <p>The table for your Excel document is below.</p>

        <table id="dataTable">
            <thead>
                <tr>
                    @foreach (DataColumn column in Model.Columns)
                    {
                        <th>@column.ColumnName</th> <!-- Display the column names in the table header -->
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (DataRow row in Model.Rows)
                {
                    <tr>
                        @foreach (var item in row.ItemArray)
                        {
                            <td>
                                <input type="text" value="@item.ToString()" oninput="updateCell(this)">
                            </td> <!-- Display the cell values as editable input fields -->
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div class="table-buttons">
            <button type="button" onclick="addLine()">Add Line</button>
            <button type="button" onclick="removeLine()">Remove Line</button>
            <button type="button" onclick="exportToExcel()">Export to Excel</button>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Function to add a new line to the table
        function addLine() {
            var table = document.getElementById("dataTable");
            var newRow = table.insertRow(table.rows.length);

            var columnsCount = table.rows[0].cells.length;

            for (var i = 0; i < columnsCount; i++) {
                var newCell = newRow.insertCell(i);
                newCell.innerHTML = "<input type='text' oninput='updateCell(this)'>";
            }
        }

        // Function to remove the last line from the table
        function removeLine() {
            var table = document.getElementById("dataTable");

            if (table.rows.length > 1) {
                table.deleteRow(table.rows.length - 1);
            }
        }

        // Function to update the cell value when the input field is changed
        function updateCell(input) {
            input.addEventListener("keydown", function (e) {
                e.stopPropagation();
            });
        }

        // Function to export the table data to Excel
        function exportToExcel() {
            var table = document.getElementById("dataTable");
            var rows = table.getElementsByTagName("tr");

            var data = [];
            
            // Get the header row data and add it to the data array
            var headerRowCells = rows[0].getElementsByTagName("th");
            var headerRowData = [];
            for (var k = 0; k < headerRowCells.length; k++) {
                headerRowData.push(headerRowCells[k].textContent);
            }
            data.push(headerRowData);

            // Iterate over the rows (excluding the header row) and get the cell values
            for (var i = 1; i < rows.length; i++) {
                var row = rows[i];
                var cells = row.getElementsByTagName("td");
                var rowData = [];
                for (var j = 0; j < cells.length; j++) {
                    rowData.push(cells[j].getElementsByTagName("input")[0].value);
                }
                data.push(rowData);
            }

            // Send the table data to the server for Excel export
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "@Url.Action("ExportToExcel", "Home")");
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xhr.responseType = "blob";

            xhr.onload = function () {
                if (xhr.status === 200) {
                    // Create a download link for the exported Excel file
                    var blob = xhr.response;
                    var link = document.createElement("a");
                    link.href = window.URL.createObjectURL(blob);
                    link.download = "ExcelData.xlsx";
                    link.click();
                }
            };

            xhr.send(JSON.stringify(data));
        }
    </script>
}